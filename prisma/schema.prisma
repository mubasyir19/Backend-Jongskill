// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fullname  String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coursesCreated Course[]     @relation("MentorCourses")
  reviews        Review[]
  Enrollment     Enrollment[]
  certificates Certificate[]
}

enum Role {
  ADMIN
  MENTOR
  STUDENT
}

model Category {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]
}

model Course {
  id          String   @id @default(uuid())
  categoryId  String
  title       String   @db.VarChar(255)
  description String   @db.Text
  thumbnail   String?  @db.Text
  mentorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mentor   User     @relation("MentorCourses", fields: [mentorId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  Review     Review[]
  Enrollment Enrollment[]
  Lesson     Lesson[]
  certificates Certificate[]
}

model Lesson {
  id        String   @id @default(uuid())
  courseId  String
  title     String   @db.VarChar(255)
  duration  Int      @db.Integer
  order     Int      @db.Integer
  videoUrl  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Certificate {
  id String @id @default(uuid())
  userId String
  courseId String
  issuedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  courser Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}